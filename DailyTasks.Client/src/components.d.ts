/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  IDailyTaskList,
} from './base/interface';

export namespace Components {
  interface AppRoot {}
  interface CalendarComponent {
    'currentSelectedDate': Date;
    'ignoreDateChange': boolean;
  }
  interface DailyTaskInsertEdit {
    'loadState': () => Promise<void>;
    'modalController': HTMLModalComponentElement;
    'taskId': string;
  }
  interface DailyTaskList {}
  interface DailyTaskOptions {
    'openClose': (e: any) => Promise<void>;
    'task': IDailyTaskList;
  }
  interface HeaderComponent {
    'hideCalendar': boolean;
    'showBackButton': boolean;
  }
  interface LoaderComponent {
    'dismiss': () => Promise<void>;
    'show': () => Promise<void>;
  }
  interface ModalComponent {
    'dismiss': () => Promise<void>;
    'present': () => Promise<void>;
  }
  interface SpinnerComponent {}
}

declare global {


  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLCalendarComponentElement extends Components.CalendarComponent, HTMLStencilElement {}
  var HTMLCalendarComponentElement: {
    prototype: HTMLCalendarComponentElement;
    new (): HTMLCalendarComponentElement;
  };

  interface HTMLDailyTaskInsertEditElement extends Components.DailyTaskInsertEdit, HTMLStencilElement {}
  var HTMLDailyTaskInsertEditElement: {
    prototype: HTMLDailyTaskInsertEditElement;
    new (): HTMLDailyTaskInsertEditElement;
  };

  interface HTMLDailyTaskListElement extends Components.DailyTaskList, HTMLStencilElement {}
  var HTMLDailyTaskListElement: {
    prototype: HTMLDailyTaskListElement;
    new (): HTMLDailyTaskListElement;
  };

  interface HTMLDailyTaskOptionsElement extends Components.DailyTaskOptions, HTMLStencilElement {}
  var HTMLDailyTaskOptionsElement: {
    prototype: HTMLDailyTaskOptionsElement;
    new (): HTMLDailyTaskOptionsElement;
  };

  interface HTMLHeaderComponentElement extends Components.HeaderComponent, HTMLStencilElement {}
  var HTMLHeaderComponentElement: {
    prototype: HTMLHeaderComponentElement;
    new (): HTMLHeaderComponentElement;
  };

  interface HTMLLoaderComponentElement extends Components.LoaderComponent, HTMLStencilElement {}
  var HTMLLoaderComponentElement: {
    prototype: HTMLLoaderComponentElement;
    new (): HTMLLoaderComponentElement;
  };

  interface HTMLModalComponentElement extends Components.ModalComponent, HTMLStencilElement {}
  var HTMLModalComponentElement: {
    prototype: HTMLModalComponentElement;
    new (): HTMLModalComponentElement;
  };

  interface HTMLSpinnerComponentElement extends Components.SpinnerComponent, HTMLStencilElement {}
  var HTMLSpinnerComponentElement: {
    prototype: HTMLSpinnerComponentElement;
    new (): HTMLSpinnerComponentElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
    'calendar-component': HTMLCalendarComponentElement;
    'daily-task-insert-edit': HTMLDailyTaskInsertEditElement;
    'daily-task-list': HTMLDailyTaskListElement;
    'daily-task-options': HTMLDailyTaskOptionsElement;
    'header-component': HTMLHeaderComponentElement;
    'loader-component': HTMLLoaderComponentElement;
    'modal-component': HTMLModalComponentElement;
    'spinner-component': HTMLSpinnerComponentElement;
  }
}

declare namespace LocalJSX {
  interface AppRoot {}
  interface CalendarComponent {
    'currentSelectedDate'?: Date;
    'ignoreDateChange'?: boolean;
  }
  interface DailyTaskInsertEdit {
    'modalController'?: HTMLModalComponentElement;
    'taskId'?: string;
  }
  interface DailyTaskList {}
  interface DailyTaskOptions {
    'onTaskUpdatedEvent'?: (event: CustomEvent<any>) => void;
    'task'?: IDailyTaskList;
  }
  interface HeaderComponent {
    'hideCalendar'?: boolean;
    'showBackButton'?: boolean;
  }
  interface LoaderComponent {}
  interface ModalComponent {}
  interface SpinnerComponent {}

  interface IntrinsicElements {
    'app-root': AppRoot;
    'calendar-component': CalendarComponent;
    'daily-task-insert-edit': DailyTaskInsertEdit;
    'daily-task-list': DailyTaskList;
    'daily-task-options': DailyTaskOptions;
    'header-component': HeaderComponent;
    'loader-component': LoaderComponent;
    'modal-component': ModalComponent;
    'spinner-component': SpinnerComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'calendar-component': LocalJSX.CalendarComponent & JSXBase.HTMLAttributes<HTMLCalendarComponentElement>;
      'daily-task-insert-edit': LocalJSX.DailyTaskInsertEdit & JSXBase.HTMLAttributes<HTMLDailyTaskInsertEditElement>;
      'daily-task-list': LocalJSX.DailyTaskList & JSXBase.HTMLAttributes<HTMLDailyTaskListElement>;
      'daily-task-options': LocalJSX.DailyTaskOptions & JSXBase.HTMLAttributes<HTMLDailyTaskOptionsElement>;
      'header-component': LocalJSX.HeaderComponent & JSXBase.HTMLAttributes<HTMLHeaderComponentElement>;
      'loader-component': LocalJSX.LoaderComponent & JSXBase.HTMLAttributes<HTMLLoaderComponentElement>;
      'modal-component': LocalJSX.ModalComponent & JSXBase.HTMLAttributes<HTMLModalComponentElement>;
      'spinner-component': LocalJSX.SpinnerComponent & JSXBase.HTMLAttributes<HTMLSpinnerComponentElement>;
    }
  }
}


